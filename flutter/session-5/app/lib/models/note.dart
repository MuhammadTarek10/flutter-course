import 'package:hive/hive.dart';

// 📝 Note Model for Hive Database
//
// This file demonstrates how to create a data model for Hive NoSQL database.
// Hive uses type adapters to convert Dart objects to/from binary format.

part 'note.g.dart'; // This will be generated by build_runner

@HiveType(typeId: 0) // Each HiveType needs a unique typeId
class Note extends HiveObject {
  @HiveField(0) // Each field needs a unique index
  String title;

  @HiveField(1)
  String content;

  @HiveField(2)
  DateTime createdAt;

  @HiveField(3)
  DateTime updatedAt;

  Note({
    required this.title,
    required this.content,
    required this.createdAt,
    required this.updatedAt,
  });

  // 📝 Factory constructor for creating a new note
  factory Note.create({required String title, required String content}) {
    final now = DateTime.now();
    return Note(title: title, content: content, createdAt: now, updatedAt: now);
  }

  // 🔄 Method to update note content
  void updateContent({String? title, String? content}) {
    if (title != null) this.title = title;
    if (content != null) this.content = content;
    updatedAt = DateTime.now();

    // Save changes to Hive (since Note extends HiveObject)
    save();
  }

  // 📅 Get formatted creation date
  String get formattedCreatedAt {
    return '${createdAt.day}/${createdAt.month}/${createdAt.year} '
        '${createdAt.hour.toString().padLeft(2, '0')}:'
        '${createdAt.minute.toString().padLeft(2, '0')}';
  }

  // 📅 Get formatted update date
  String get formattedUpdatedAt {
    return '${updatedAt.day}/${updatedAt.month}/${updatedAt.year} '
        '${updatedAt.hour.toString().padLeft(2, '0')}:'
        '${updatedAt.minute.toString().padLeft(2, '0')}';
  }

  // ⏰ Check if note was recently created (within last hour)
  bool get isRecentlyCreated {
    final now = DateTime.now();
    final difference = now.difference(createdAt);
    return difference.inHours < 1;
  }

  // ✏️ Check if note was recently updated (within last 10 minutes)
  bool get isRecentlyUpdated {
    final now = DateTime.now();
    final difference = now.difference(updatedAt);
    return difference.inMinutes < 10;
  }

  // 📊 Get note summary (first 50 characters)
  String get summary {
    if (content.length <= 50) return content;
    return '${content.substring(0, 50)}...';
  }

  @override
  String toString() {
    return 'Note(title: $title, content: ${content.substring(0, content.length.clamp(0, 20))}..., createdAt: $formattedCreatedAt)';
  }
}

// 📚 Learning Notes:
//
// 1. HIVE ANNOTATIONS:
//    @HiveType(typeId: X) - Marks a class as a Hive type with unique ID
//    @HiveField(X) - Marks a field to be stored, with unique index
//
// 2. TYPE IDS & FIELD INDEXES:
//    - typeId must be unique across your entire app
//    - HiveField indexes must be unique within the class
//    - Never change these numbers after deployment!
//
// 3. HIVE OBJECT:
//    - Extending HiveObject gives you save() and delete() methods
//    - Allows direct manipulation of objects in the database
//    - Objects know which box they belong to
//
// 4. CODE GENERATION:
//    - Run: flutter packages pub run build_runner build
//    - Generates note.g.dart with TypeAdapter
//    - Must be done before using the model with Hive
//
// 5. BEST PRACTICES:
//    - Keep models simple and focused
//    - Use factory constructors for common creation patterns
//    - Add helper methods for common operations
//    - Include validation where appropriate
